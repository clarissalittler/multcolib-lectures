#+TITLE: Beginning Programming in JavaScript
#+AUTHOR: Clarissa Littler

#+OPTIONS: H:2 toc:nil
#+startup: beamer
#+BEAMER_THEME: Madrid
#+LaTeX_CLASS: beamer

* Intermediate Javascript
** Dictionaries and Phonebooks
   + Dictionaries :: names $\rightarrow$ defintions
   + Phonebooks :: names $\rightarrow$ numbers
   + Directory :: names $\rightarrow$ locations
** Named Collections in JavaScript

*** 
    + Objects \pause
      + ={name : val, name : val, ...}= \pause
      + =obj.name= \pause
      + =obj.name = 10= \pause
    + Sets of /properties/ and /values/ \pause
** Named Collections in JavaScript
*** 
 #+BEGIN_SRC js :exports code :results output
   var obj = {prop1 : 0, prop2 : 1};
   console.log(obj.prop1);
   console.log(obj.prop2);
   console.log(obj.prop3);
 #+END_SRC

 #+RESULTS:
 : 0
** Making Objects
*** Quiz
    Fill in the ellipses so that the two console.log statements print =true=
    #+BEGIN_SRC js :exports code
      var obj = {...};
      console.log(obj.name === "chicken");
      console.log(obj.typeOfAnimal === "dog");
    #+END_SRC 
\pause
*** Answer
    #+BEGIN_SRC js :exports code :results output
      var obj = {name : "chicken", typeOfAnimal : "dog"};
      console.log(obj.name === "chicken");
      console.log(obj.typeOfAnimal === "dog");
    #+END_SRC

    #+RESULTS:
    : true
    : true
\pause
Are there any other answers?
** Nesting Objects
Objects can contain other objects
*** Question
    Fill in the ellipses so that the console.log statement prints =true=
#+BEGIN_SRC js :exports code
  var obj = {name : "Claire", possessions : 
	       {leftPocket : "A cell phone", 
	        rightPocket : "60 cents"}};

  console.log(... === "60 cents");
#+END_SRC
\pause
*** Answer
#+BEGIN_SRC js :exports code
  var obj = {name : "Claire", possessions :
	       {leftPocket : "A cell phone", 
	        rightPocket : "60 cents"}};

  console.log(obj.posessions.rightPocket === "60 cents");
#+END_SRC

** More on Objects
   + Objects are ubiquitious in JavaScript \pause
   + =console.log= \pause
   + =str.length= \pause
   + Everything is (basically) an object
** Lists in real-life
   + Grocery lists \pause
   + Directions \pause
   + Bookshelves \pause
   + Music collections
** Arrays in JavaScript
   + Lists in JavaScript are called arrays \pause
   + =[1,2,3,4]= \pause
   + Is =arr[2]= the 2nd element or 3rd element? \pause
   + =arr.length= \pause
   + =arr.slice(1,3)=
** Array Exercises
*** Question
   Fill in the ??? so that the following code prints "[2,3]"
   #+BEGIN_SRC js :exports code
     var arr1 = [1,2,3,4];
     console.log(arr1.slice(???,???));
   #+END_SRC
\pause
*** Answer
  #+BEGIN_SRC js :exports code :results output 
     var arr1 = [1,2,3,4];
     console.log(arr1.slice(1,3);
   #+END_SRC
** Iteration 
   + Peel six potatoes \pause
   + Take the next three lefts \pause
   + Run for twenty minutes \pause
   + Performing an action a *number* of times
** For-loops
*** 
   For-loops/for-statements \pause
   
   #+BEGIN_SRC js :exports code
     for(var i=0;i < 10; i = i + 1){
         console.log(i);
     }
   #+END_SRC
** For-loops
*** 
 #+BEGIN_SRC js :exports code
  for(initial expression; condition for ending; next step){
      body
  }
#+END_SRC
\pause
*** 
    + Setup \pause
    + How you know when you're done \pause
    + The next step to take
** For-loop Exercises
*** Question
Fill in the question marks so the following code only prints even numbers
#+BEGIN_SRC js :exports code
  for(var i=0;i < 11; ???){
      console.log(i);
  }
#+END_SRC
\pause
*** Answer
#+BEGIN_SRC js :exports code
  for(var i=0;i < 11; i = i + 2){
      console.log(i);
  }
#+END_SRC
** For-loop Exercises
*** Question
Fill in the question marks so the following code prints the numbers from 3-20
#+BEGIN_SRC js :exports code
  for(var i=???;i < ???; i = i + 1){
      console.log(i);
  }
#+END_SRC
\pause
*** Answer
#+BEGIN_SRC js :exports code :results output
  for(var i=3;i < 21; i = i + 1){
      console.log(i);
  }
#+END_SRC

#+RESULTS:
#+begin_example
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
#+end_example
** For-loop Exercises
*** Question
    Fill in the question marks so the following code prints the contents of the array an element at a time
#+BEGIN_SRC js :exports code
  var myArray = [0,1,2,3,4];
  for(var i = 0; i < ???; i = i +1){
      console.log(???);
  }
#+END_SRC
\pause
*** Answer
#+BEGIN_SRC js :exports code
  var myArray = [0,1,2,3,4];
  for(var i = 0; i < myArray.length; i = i +1){
      console.log(myArray[i]);
  }
#+END_SRC
** Iteration
   + /Do/ this, /until/ that \pause
   + /While/ that, /do/ this \pause
   + While it's raining, use an umbrella \pause
   + Until you reach 750 words, keep typing
** While-loops
   While-loop/while-statement
   \pause 
#+BEGIN_SRC js :exports code
  while (condition) {
  body
  }
#+END_SRC
** While-loops
   + For is for a set number of times \pause
     + Or set number of items \pause
   + While is for general "loops"
** While-example
#+BEGIN_SRC js :exports code :results output
  var sum0 = 0;
  var sum1 = 1;
  while (sum1 < 1000) {
      console.log(sum0);
      var temp = sum1;
      sum1 = sum1 + sum0;
      sum0 = temp;
  }
#+END_SRC

#+RESULTS:
#+begin_example
0
1
1
1
1
2
2
3
3
5
5
8
8
13
13
21
21
34
34
55
55
89
89
144
144
233
233
377
377
610
610
987
#+end_example
** While-loop Exercises
*** Question
Fill in the following code so that it prints all the powers of two less than 1500 
#+BEGIN_SRC js :exports code
  var sum = 1;
  while (???) {
      console.log(sum);
      sum = 2*sum;
  }
#+END_SRC
\pause
*** Answer
#+BEGIN_SRC js :exports code
  var sum = 1;
  while (???) {
      console.log(sum);
      sum = 2*sum;
  }
#+END_SRC
** Defining Functions
*** 
   + Function expression \pause
     + =function (arg1, arg2, ..) { body }= \pause
     + =return= says /stop/, /exit/, give back a value \pause
     + with no =return=, function gives back =undefined= \pause
       + like =console.log= \pause
     + Assign to variables and properties
** Defining Functions
*** 					
#+BEGIN_SRC js :exports code :results output
  var adding = function (x,y) {return x + y;};
  console.log(adding(1,2));
  var myObj = {};
  myObj.adder = adding;
  console.log(myObj.adder(1,2));
#+END_SRC

#+RESULTS:
: 3
: 3
** Function Exercises
*** 
Will the following code print =1= or =2=?
#+BEGIN_SRC js :exports code :results output
  var myVar = 0;
  var fun = function () {
      myVar = myVar + 1;
      return;
      myVar = myVar + 1;
  };
  fun();
  console.log(myVar);
#+END_SRC

#+RESULTS:
: 1
\pause
*** 
    It prints =1=. Why?
** Function Exercises
*** 
Fill in the following code to make a function that will return 0 if the argument is less than 0, and 1 if the argument is greater than or equal to 0.
#+BEGIN_SRC js :exports code
  var compare = function (x) {
      if (...) {
          ...
      }
      else {
          ...
      }
  }
#+END_SRC
\pause
***
#+BEGIN_SRC js :exports code
  var compare = function (x) {
      if (x < 0) {
          return 0;
      }
      else {
          return 1;
      }
  }
#+END_SRC

* What Makes a Website Tick
** What Happens When You Visit a Webpage
   + You enter a URL \pause
   + The DNS system finds the server \pause
   + Your browser makes an HTTP request \pause
   + The server processes the request \pause
   + The server sends a response \pause
   + Your browser receives the response
** HTTP
   + =GET= \pause
   + =POST= \pause
   + =PUT= \pause
   + =DELETE=
** The Client
   + Sends the request \pause
   + Receives \pause
     + HTML \pause
     + CSS \pause
     + JavaScript \pause
   + Renders the webpage
** Where Javascript fits in
   + View source \pause
   + The JavaScript code changes the page \pause
   + Listens for events: \pause
     + keyboard input \pause
     + mouse movement \pause
     + mouse clicks \pause
   + https://www.tinkercad.com/
** Code Academy
   + More time for practice \pause
   + I'll answer any questions you have
