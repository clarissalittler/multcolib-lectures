#+TITLE: Beginning Programming in JavaScript (Lecture Notes)
#+AUTHOR: Clarissa Littler

* Lecture 1
** Introduction
   If you're here in the class, I'll presume that you're hoping to learn at least a little bit about programming. This class is going to be 
   + three lectures
   + two hours each
 which isn't a lot of time together. So, rather than trying to take everyone from beginner to expert in this short time, my goal is to make sure that everyone gets a solid foundation to buid on and, maybe, a bit of exitement and enthusiasm for the subject.
*** Why Programming?
    First, let's talk about why someone would even want to learn computer programming in the first place. There's the obvious pragmatic reason of hoping to get a job as a programmer. There's also all the things you can potentially /do/ as a programmer. These days we talk a lot about coding websites and mobile apps, which are massively important in their own right, but there's even more beyond that. In just the last few years we've reached a point where we can programmatically control the electronics in our houses, we can write code to control 3D printers, we can program AIs and robots and self-driving vehicles. A larger and larger portion of our lives is going to be mediated by code and automation, and since I have a strong populist streak I'd love to see more people be able to take control of this dependence on automation and artificial intelligence.

    Even beyond all of those good reasons for learning programming, there's also just the pleasure of it. Coding can be a lot like cooking or any other form of crafting: you're figuring out how to make something and just the act of /making/ brings a certain pleasure with it.
*** What Is Programming?
    Before we start talking about /how/ to program, we need to discuss /what/ programming is. The answer I think I lot of people would give is something like "programming is how you tell a computer to do things", which is true but I think we can go a little deeper than that by taking a detour through what "computer" and "computation" really mean. 

    Once upon a time, by which I mean the first half of the twentieth century, "computer" was a job title not a noun. A computer was a person who made calculations, often for physics experiments or firing solution tables for the military. In other words, computers were people whose job was to /perform computation/. As a historical side-note, computers were mostly women and these computers, in turn, were some of the first programmers. 

    Computers, whether people or machines, perform computations by executing a series of steps. Think back to how you learned to add big numbers together with a pencil and paper: you start at the rightmost column, add the two numbers together, carry the one if you need to, and proceed to the next column. In fact, every calculation you learned how to do in math classes all had some series of steps you were supposed to do to get the answer. 

    We can generalize this idea of taking steps and calculations to be about more than just numbers. Any procedure that takes
    + a finite[fn:1] number of steps 
    + a finite amount of "material"
    + a finite amount of time to complete 
 can be described as a computation. This includes things like
    + cooking
    + following a map
    + building furniture from a wordless diagram

 And while tasks like these might seem like a bit of a digression when we're talkinga about /computers/, the point here is that anything that *can* be described in the "finite" way we did above can potentially be done by programmed machine. Self-driving cars can follow map directions to get to a destination. 3D printers can assemble solid objects given a blue print and enough matieral. 

 Computation is not just number crunching or showing you a webpage. Now, you might be wondering what /can't/ be described by a computation, and it turns out the answer is "quite a lot, but not a lot you'd care about". You're most likely to run into the limits of computation when writing programs that try to analyze other programs. This is why there's no perfect anti-virus program: it's physically impossible for there to be a program that can look at another program and determine, with perfect accuracy, whether or not its a virus. I'm not joking when I say "physically impossible". The limits of computation are as real and physical as the laws of motion. No amount of making computers faster can get around them. 

 The difference between a recipe and a "program" is the level of precision. A recipe can be short, to the point, and you can fill in the gaps because you're a person and you have experience you can draw on to make conclusions, to read between the lines. A computer doesn't have that ability. It needs instructions to be absolutely precise, to be 100% clear with no ambiguity. Writing in English, or any other natural language, isn't precise enough to be certain that you're telling the machine what you *think* you're telling it. 

 Because of this, programming languages tend to be small and with a very rigid, non-extensible grammar. The same way that in any language we speak there's a notion of "correct" and "incorrect" grammar, there's correct and incorrect grammar for a programming language. Unlike a natural language, where I can speak my native tongue of Texan and say "y'all'd've" and you probably know what I mean. Spend five minutes on tumblr and you'll see new idioms and words being coined constantly. It's really cool! Programming languages don't generally have this flexibility, though. Their grammar is set. 

 Instead, we have specialized, simple, languages for exactly describing what the computer should do. Unsurprisingly, we call these /programming languages/. There's many, many programming languages out there and some are good, some are bad, but most are just /different/ ways of describing computations to the computer. For this course, we'll be specifically learning a language called JavaScript.
*** Why JavaScript?
    In this mini-course we'll be learning JavaScript. Why JavaScript in particular, though? First, JavaScript is the language that makes interactive websites *work*. Now, if your first thought is "what's a non-interactice site?" then I suggest you try looking at one of the GeoCities archive projects to see what 90s web pages looked like. They were ugly and they were basically just static text, images, and links. Nothing changed when you interacted with it. The only real points of interaction were forms and links.

    Obviously, that's nothing what websites look like now. We have animations as you hover over and click things. We have pages that change constantly as you're interacting with them. We even have rich games that can run in the browser. All of that is possible because we now have the ability to run code that creates this interactive experience. All of the code that runs in your web browser is in JavaScript.

    Why? Well, like most things related to programming language adoption it's a matter of someone deciding to use it and eventually everyone else settling on the ready solution rather than inventing their own. The end result, though, is that every browser that exists, whether on a phone, or a laptop, or a desktop, or a tablet all have what's called an /interpreter/ that can understand JavaScript programs and run them in order to make the page your own interactive. We'll talk more later about /what/ happens in your browser when you visit a webpage.

    Suffice it to say, JavaScript is a ubiquitous and important language now.

    Lukily, I happen to also think it's a fairly decent one. If you look online for people's opinions on JavaScript you'll find it gets some hate because there are some pretty weird and counterintuitve aspects of the language, but they're also mostly avoidable unless you're running into someone else's code that uses them. "JavaScript: The Good Parts" by Crockford is a good reference for the nice, clean core of the language. 
** Beginning JavaScript
*** Opening The JavaScript Console
    The first thing we should do is show how to open up the JavaScript console for your browser. The console is a place where you can type in code and have the built-in interpreter that comes with your browser /run/ the code and give you its result.

    http://webmasters.stackexchange.com/questions/8525/how-to-open-the-javascript-console-in-different-browsers 
*** Syntax and Semantics
    As we delve into JavaScript, let's first discuss the difference between /syntax/ and /semantics/. Syntax is the grammar of the language and the semantics is the /meaning/ of the syntax. We're going to introduce the syntax of JavaScript piece by piece, explaining how each piece relates to our intuitive notions of /computation/.
*** Nouns and Verbs
    The same way that, in English, there's nouns that describe objects and verbs that describe actions, in a programming language there's a distinction between the "nouns" that describe data and the "verbs" that describe what to do with the data. 

    Data in a programming language are going to be things like numbers, pieces of text called strings, lists of things, and collections of things. 

    The actions in a programming language are things like reading in user input, printing out messages, changing the webpage, changing data, and storing data. There's even more complicated constructs to do things multiple times or to even store code so it can be reused again and again. 
*** Arithmetic
    The first kind of data we'll look at are /numbers/. Numbers in JavaScript are just like numbers in math classes you took. The operations you're familiar with are all here: multiplication, division, addition, and subtraction. 

    In JavaScript
    + addition :: +
    + subtraction :: -
    + division :: /
    + multiplication :: *

    If you type in something like ~10*(3-2)+5~ into the console you'll see the JavaScript interpreter /evaluate/ the expression and then return the value, which in this case is 15.

    Go ahead and try a few arithmetic expressions just to see what happens.
*** Strings
    One of the other incredibly important kinds of data are /strings/. Strings are pieces of text held within quotation marks, either double or single quotes. A programming language needs strings so that it can interact with text: either reading and understanding it or displaying it to the user. 

You can make a string either like 
#+BEGIN_SRC js :exports code
  "this is a string, or should I say 'a string'"
#+END_SRC
or like this
#+BEGIN_SRC js :exports code
  'this is a string, or should I say "a string"'
#+END_SRC
but there's a few things that /aren't/ valid. You can't do 
#+BEGIN_SRC js :exports code
  "this is a string, or should I say "a string""
#+END_SRC
because since you started the string with a double-quote its not obvious to the interpreter where you wanted the end of the string to be. If you want to represent quotations-within-strings you should really just switch between single and double quotes.

This also means that it isn't valid to mis-match the kinds of quotation marks. So something like
#+BEGIN_SRC js :exports code
  "this is a string'
#+END_SRC
will not work.
*** Variables
    In any programming language, there's some notion of "variable" that allows you to give a name to a value. In JavaScript, these variables are defined as something like
    #+BEGIN_SRC js :exports code
      var thisIsAVariable = "and this is its value"
    #+END_SRC

    Variables in JavaScript act as a kind of container that holds information. Once created, you can change what goes /in/ the variable as follows
    #+BEGIN_SRC js :exports code
      thisIsAVariable = "and now the value has changed"
    #+END_SRC

    To retrieve the data in the container, just use the name of the variable. If you type ~thisIsAVariable~ into the console, you'll get back the data you put in the container, which in this case should be "and now the value has changed".
*** Undefined
    Now, it's actually possible, though not recommended, to declare a variable without giving it a value just by not giving a right hand side, like in the following example
    #+BEGIN_SRC js :exports code
      var isItEmpty
    #+END_SRC
Now what's actually in this variable? If you try typing ~isItEmpty~ into the console you'll see a value of ~undefined~.

~undefined~ is the special JavaScript value that signifies that something /doesn't/ have a value. It's the value of no-value, much like how 0 was originally seen as the absence of anything. This special value is used often in JavaScript to designate that something isn't well-defined.

It is, though, just a value that you can type in the command line or assign to a variable.
*** Using Functions
    So far we've only seen very simple operations. Obviously a programming language needs a lot more to be able to be useful. A lot of the functionality of a programming language is going to be in the, well, /functions/.

    Functions in a programming language such as JavaScript are a little the same and a little different from functions as you may have seen them in an algebra class. In algebra, there are things like
#+BEGIN_EXAMPLE
f(x) = x + 2
#+END_EXAMPLE
and then you can /apply/ the function to an argument. In this case, we have that =f(2)= is going to compute to 4. In algebra, we can think of functions as things that take arguments and perform computations, it's just that the computations are limited to number crunching.
In a programming language such as JavaScript, there's many things that a function can do that aren't giving you back a number. Functions in JavaScript are allowed to 
    + change variables
    + display messages to a user
    + communicate with other computers
    + etc.
in addition to returning a value. 

Many functions, if they don't need to return anything particularly useful, will just return ~undefined~. 

We'll cover how to define functions shortly, but for now let's talk about an example of a function, ~console.log~, which prints out a value to the console.

We can use it like 
#+BEGIN_SRC js :exports code
  console.log(10+20)
#+END_SRC

We can see from this example the form, or syntax, of using a function is just like our example from algebra: you put the argument in parentheses just after the function name. If you have multiple arguments, you separate them by commas. 
*** Sequencing Operations
So far we've only looked at the ability to do one thing at a time. In JavaScript, as with most programming languages, you can have a /sequence/ of steps. In a set of instructions you might have something like a bulleted or numbered list giving the steps needed and the order to take them in. In JavaScript you're going to have something akin to these lists of steps. Namely, you separate steps of computation with linebreaks and a semi-colon.

For example if you ran a JavaScript program with the following lines,
#+BEGIN_SRC js :exports code
  console.log("this is one step"):
  console.log("this is another step");
  console.log("gracious, a third step");
#+END_SRC
it would print out, in order,
#+BEGIN_EXAMPLE
this is one step
this is another step
gracious, a third step
#+END_EXAMPLE
and be done.

Whenever we want to sequence actions we need to separate them on separate lines and use semicolons. The semicolons don't *mean* anything per se, they're just useful for the JavaScript interpreter to very easily check "what's the end of a step".
*** Making Choices
    Often when we're discussing instructions there's a notion of /choice/. *If* it's raining, take an umbrella. *If* you see the purple Little Free Library, take a right, otherwise you should keep walking. *If* the avocados are ripe, make tacos.

    We can make these choices in programming as well. *If* the username and password match, log the user in. *If* the user clicks send, send the email. 
**** Booleans
     In order to make these choices, though, we need for the programming language to understand what it means for something to be "true".

     While truth is a pretty complicated concept if you ask a philosopher, for the purposes of basic programming it's quite simple: there is a kind of data called a /boolean/. Booleans are either ~true~ or ~false~. In order to make decisions, we need operations and functions that will return booleans. 

     For example, we have the equality operator, ~===~, and the less than operator ~<~, and the greater than operator ~>~. These operations follow our intuitive notions of what they should mean. ~2 < 5~ is true, but ~2 === 5~ is false. 
**** If-statements
    As you can imagine from the way I've been emphasizing the word "if", it's somehow important to the syntax of making choices.

    We call these "if-statements", and we use them like
#+BEGIN_SRC js :exports code
  if (2 < 5) {
      console.log("two is less than five");
  }
#+END_SRC

What if you have alternatives in mind: code that you want to run if the condition /isn't true/? In that case you need the keyword ~else~, as in
#+BEGIN_SRC  js :exports code
  if (2 === 5) {
      console.log("two is equal to five");
  }
  else {
      console.log("two wasn't equal to five");
  }
#+END_SRC

** Code Academy 
As some actual practice with the concepts we're talking about, Code Academy has a free basic introduction to JavaScript. Since there's only so much one can lecture and have it be useful, I think spending some time going through their exercises might help. If they're too simple and boring, feel free to jump ahead or ask for something else to do.
* Lecture 2
** More JavaScript
Welcome back! Now we return to the details of JavaScript. The first thing we're going to do is introduce notions of /iteration/. 
*** Iteration
We're all familiar with instructions of the form 
    + chop three onions
    + knit five rows
    + walk three blocks
These are all directions that involve doing /something/ a set /number of times/. We've seen before that our intuitive notions of how instructions work have a direct analog in programming languages and iteration is no different. 

The first thing to 
**** For-statements
**** While-statements
*** Arrays 
*** Objects
**** ~this~
*** Writing Functions
We've seen how to /use/ functions so far, but we haven't /written/ any yet. You make a function with the =function= keyword, followed by the names of the arguments to the function as a comma-separated list inside the parentheses, then the sequence of statements that's the body of the function between braces just like with for-statements and if-statements etc. The one way that the body of a function is different than all the other constructs we've seen til now is the use of ~return~: ~return~ is the keyword that tells the function to stop running and give back a value.

We can define a function that will add two numbers like
#+BEGIN_SRC js :exports code
  (function (x1,x2) {
      return x1 + x2;
  })
#+END_SRC
(The parentheses are ugly but I'll explain why they're needed shortly)

You /could/ call this function once by immediately using it, as in
#+BEGIN_SRC js :exports code
  (function (x1,x2) {
      return x1 + x2;
  })(1,2);
#+END_SRC

Now, we can't easily call this function without naming it. We can name functions by assigning them to a variable or to a property of an object, just like any other value. For example, we can say something like

#+BEGIN_SRC js :exports code :results output
  var adder = function (x1,x2) {return x1+x2;};
  console.log(adder(1,2));
#+END_SRC

#+RESULTS:
: 3
or we can assign it to the property of an object, as in
#+BEGIN_SRC js :exports code :results output
  var obj = {};
  obj.adder = function (x1,x2) {return x1+x2;};
  console.log(obj.adder(1,2));
#+END_SRC

#+RESULTS:
: 3


** What Are Servers?
*** What Happens When You Visit a Webpage
    So what happens when you direct your browser to a website? The first thing is that our computer needs to /find/ the server that it's supposed to talk to. This whole process is handled by what's called /DNS lookup/. 

    DNS stands for "domain name system". The domain name system is a global infrastructure of machines that keep track of the link between "domain names", e.g. "google.com" or "facebook.com" or "multcolib.org", and the actual "address" of the server on the global internet. The details of how this works aren't particularly important here, but the overall point is that there is this underlying system we use that helps us relate the domain name part of a web address to the physical machine.

    Once your computer knows how to communicate with the actual server, then you make an /HTTP/ request to the server. HTTP stands for Hypertext Transfer Protocol, and it's the agreed on "language" for a web browser to talk to a web server. There's HTTP requests for
    + GETting data
    + For sending, or POSTing, data
    + For changing, or PUTting, data
    + For DELETEing data
and others, but those are probably the main ones you'll see. 

When you actually visit a webpage, you perform a GET request to get the HTML and JavaScript code to run the page. Then, your browser will /render/ that data as a webpage. 
** Code Academy
   At this point, we'll take a break from lecturing and you can go back to CodeAcademy, or any other studying you want to do, and I'll answer questions. 
* Lecture 3
** Where To Go From Here?
   We come now to the end of these lectures. We haven't been able to cover a lot more than the very basics of programming and there's so much more to learn.

   If you're interested mostly in making rich websites then you're going to want to continue learning JavaScript. In addition, you'll want to learn about the Node framework, which allows you to write servers in JavaScript, and jQuery, which allows you to more easily script browsers. Thankfully, there are fairly decent learning resources for both of those. In particular, I recommend "learnyounode" and the related tutorials there. 

   If you're interested in making mobile apps, where you need to go from here depends on whether you primarily want to make Android applications or iOS applications. Android is probably the more upfront accessible, but it does means you'll need to learn another language called Java. iOS on the other hand involves learning a language called Swift. 

   If you're mostly interested in programming for general computers such as laptops and desktops or /solely/ interested in the server side of web programming, then you have a massive number of language options. I seriously recommend learning a few different languages, such as Erlang or Haskell or Idris or C: languages that have a wide variety of features and ways of expressing themselves. 
* Footnotes

[fn:1] Finite means a quantity that can be held, measured, stored. Infinite means that it's too big to be held. 
