#+TITLE: Introductory Web Programming
#+AUTHOR: Clarissa Littler
#+OPTIONS: H:3 toc:nil author:nil date:nil
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usepackage{tcolorbox}
#+LaTeX_HEADER: \setbeamercovered{transparent}
#+LaTeX_HEADER: \definecolor{RedOrange}{rgb}{1,0.3,0}
#+LaTeX_HEADER:\newenvironment<>{varblock}[2][.9\textwidth]{%
#+LaTeX_HEADER:  \setlength{\textwidth}{#1}
#+LaTeX_HEADER:  \begin{actionenv}#3%
#+LaTeX_HEADER:    \def\insertblocktitle{#2}%
#+LaTeX_HEADER:    \par%
#+LaTeX_HEADER:    \usebeamertemplate{block begin}}
#+LaTeX_HEADER:  {\par%
#+LaTeX_HEADER:    \usebeamertemplate{block end}%
#+LaTeX_HEADER:  \end{actionenv}}


#+startup: beamer
#+BEAMER_THEME: Boadilla
#+LaTeX_CLASS: beamer
* Purpose of this class                                            :noexport:
  The point of this class is to teach very basic programming on top of basic HTML and CSS. 

  We're going to assume going into this class that students have an understanding of
  + HTML
  + CSS
  + how websites work

  And then we want to cover how JavaScript is used to provide sites with some notion of interactivity.

  One thing I think we should probably do is just take a firm stance that if you don't know HTML and CSS, *we're not going to cover it*.
* Lecture 1
** Brief HTML and CSS review
*** What this class is
    This is an overview of JavaScript and how it interacts with the browser to make interactive websites
*** What you'll learn
    + A simple overview of JavaScript \pause
    + An explanation of the Document Object Model \pause
    + An overview of the event system in JavaScript \pause
    + Simple examples of writing code    
*** What you won't learn
    + The basics of HTML and CSS \pause
    + The full JavaScript programming language \pause
    + Libraries like jQuery or Angular or React
*** Make an account
file:signup.png
*** HTML in a nutshell
#+BEGIN_SRC html :exports code
  <!doctype html>
  <html>  
    <body>
      <h1>This is a heading</h1>
      <p>
	This is a paragraph of text, 
	where some of the text is <b>bold</b> and
	after this paragraph, there will be a numbered list
      </p>
    
      <ol>
	<li>lists are made of "list items"</li>
	<li>like these</li>
      </ol>
    </body>
  </html>
#+END_SRC
*** CSS in a nutshell
    :PROPERTIES:
    :BEAMER_OPT: fragile
    :END:
**** Selectors and Properties
#+BEGIN_EXPORT latex
    \begin{semiverbatim}
\onslide<1,2>selector \{
\onslide<1,3>    property: value;
\onslide<1,3>    property: value;
\onslide<1,3>    property: value;
\onslide<1,2>\}
     \end{semiverbatim}
#+END_EXPORT
** Basic JavaScript
*** What's a programming language?
#+BEGIN_CENTER
Programming languages are languages for describing computation
#+END_CENTER
*** JavaScript
#+BEGIN_CENTER
JavaScript has a special relationship to the browser
#+END_CENTER
*** Learning programming 
#+BEGIN_CENTER
Learning programming requires specificity that's unnatural. 

It's always hard at first.
#+END_CENTER
*** The console
**** Ctrl-Shift-K
file:fireconsole.png
*** Syntax and Semantics
#+BEGIN_CENTER
    Every programming language has a /grammar/ and it has to be followed exactly
#+END_CENTER
*** Numbers and Strings
****                                                              :B_columns:
     :PROPERTIES:
     :BEAMER_env: columns
     :END:
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.45
      :END:
****** Numbers
#+BEGIN_SRC js :exports code
  10
  20 + 30
  0 * 3 + 0.2
#+END_SRC
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.45
      :END:
****** Strings
#+BEGIN_SRC js :exports code
  "text"
  'also text'
  "this is an 'inner quote'"
#+END_SRC
*** Variables
****                                                              :B_columns:
     :PROPERTIES:
     :BEAMER_env: columns
     :END:
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.40
      :END:
       Variables are generalized pronouns: names that can refer to data
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.50
      :END:
****** Type into the console
#+BEGIN_SRC js :exports code
  var thisIsAName = 10
  thisIsAName
  thisIsAName = 20
  thisIsAName
#+END_SRC      
*** Variables exercise
**** Try for yourself
   + Create a variable in the console
   + Assign it a number
   + Retrieve the data out of the variable
*** Loading code into the browser
****                                                              :B_columns:
     :PROPERTIES:
     :BEAMER_env: columns
     :END:
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.45
      :END:
****** 
#+BEGIN_SRC html :exports code
  <head>
    <script>
      ...
    </script>
  </head>
#+END_SRC
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.45
      :END:
****** 
#+BEGIN_SRC html :exports code
  <head>
    <script src="yourCode.js">
    </script>
  </head>
#+END_SRC
*** Sequencing code
****                                                              :B_columns:
     :PROPERTIES:
     :BEAMER_env: columns
     :END:
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.45
      :END:
To write multiple steps of code, separate them with by semicolons.
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.45
      :END:
#+BEGIN_SRC js :exports code
  var thisIsAName = 10;
  thisIsAName;
  thisIsAName = 20;
  thisIsAName;
#+END_SRC
*** Functions
****                                                              :B_columns:
     :PROPERTIES:
     :BEAMER_env: columns
     :END:
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.45
      :END:
  Functions hold sequences of code that can be called again and again.
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.45
      :END:
#+BEGIN_SRC js :exports code
  function funName (arg1) {
      var arg2 = arg1;
      return arg2;
  }

  console.log(funName(10));
#+END_SRC
*** Functions exercise
    :PROPERTIES:
    :BEAMER_OPT: fragile
    :END:
****                                                              :B_columns:
     :PROPERTIES:
     :BEAMER_env: columns
     :END:
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.44
      :END:
****** Try for yourself
    1. open a new file, call it =funEx.js=
    2. In this file:
       + Create a function that
         + takes three arguments
         + multiplies all of them together
         + uses =console.log= to write the value to the console
       + Call the function with three arguments
    3. Create an HTML file that looks like the following
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.55
      :END:
****** Example HTML
#+BEGIN_EXPORT latex
\begin{minted}[fontsize=\footnotesize]{html}
  <html>
    <head>
      <script src="funEx.js"></script>
    </head>
  </html>  
\end{minted}
#+END_EXPORT
*** Objects
****                                                              :B_columns:
     :PROPERTIES:
     :BEAMER_env: columns
     :END:
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.35
      :END:

  Objects are ways of holding data like dictionaries or contact lists: key/value pairs
*****                                                                 :BMCOL:
      :PROPERTIES:
      :BEAMER_col: 0.60
      :END:
****** Type along
#+BEGIN_SRC js :exports code
  var obj = { property1: 10,
	      property2: 20}

  console.log(obj);
  console.log(obj.property1);
  console.log(obj.property2);
#+END_SRC
** Basic Document Object Model
*** The pineal gland of the browser
#+BEGIN_CENTER
The Document Object Model (DOM) connects the webpage you can see with the JavaScript code
#+END_CENTER
*** The DOM
#+BEGIN_CENTER
The DOM provides the /state of the webpage/ as an /object/ you can manipulate 
#+END_CENTER
*** Creating elements
    :PROPERTIES:
    :BEAMER_OPT: fragile
    :END:

#+BEGIN_EXPORT latex
\begin{minted}[fontsize=\footnotesize]{js}
  var newElement = document.createElement("h1");
  var textInTheThing = 
    document.createTextNode("There's some text in here.");
  newElement.appendChild(textInTheThing);

  document.body.appendChild(newElement);
\end{minted}
#+END_EXPORT

*** Type the following into a file called =LoadTest.html=
    :PROPERTIES:
    :BEAMER_OPT: fragile
    :END:

#+BEGIN_SRC html :exports none :tangle webdev/LoadTest.html
  <html>
    <head>
      <script>
          var newElement = document.createElement("h1");
	  var textInTheThing = 
	    document.createTextNode("There's some text in here.");
	  newElement.appendChild(textInTheThing);

	  document.body.appendChild(newElement);
      </script>
    </head>
    <body>
    </body>
  </html>
#+END_SRC
#+BEGIN_EXPORT latex

\begin{minted}[fontsize=\footnotesize]{html}
  <html>
    <head>
      <script>
         var newElement = document.createElement("h1");
	 var textInTheThing = 
	   document.createTextNode("There's some text in here.");
	 newElement.appendChild(textInTheThing);

	 document.body.appendChild(newElement);
      </script>
    </head>
    <body>
    </body>
  </html>
\end{minted}
#+END_EXPORT
*** Making sure it loads
**** You probably saw something like
file:webdev/loadTest.png
*** What went wrong?
**** Loading order
#+BEGIN_CENTER
The code needed to run after, not before, =body= existed
#+END_CENTER
*** A taste of events
    :PROPERTIES:
    :BEAMER_OPT: fragile
    :END:
#+BEGIN_SRC html :exports none :tangle webdev/LoadTest2.html
  <html>
    <head>
      <script>
          window.onload = function () {
            var newElement = document.createElement("h1");
	    var textInTheThing = 
	      document.createTextNode("There's some text in here.");
	    newElement.appendChild(textInTheThing);

	    document.body.appendChild(newElement);
	  }
      </script>
    </head>
    <body>
    </body>
  </html>
#+END_SRC

#+BEGIN_EXPORT latex
\begin{minted}[fontsize=\footnotesize]{html}
  <html>
    <head>
      <script>
          window.onload = function () {
            var newElement = document.createElement("h1");
	    var textInTheThing = 
	      document.createTextNode("There's some text in here.");
	    newElement.appendChild(textInTheThing);

	    document.body.appendChild(newElement);
	  }
      </script>
    </head>
    <body>
    </body>
  </html>
\end{minted}
#+END_EXPORT

*** How to change elements
#+BEGIN_CENTER
To change elements, you usually will change their CSS classes
#+END_CENTER
*** Adding and removing classes
#+BEGIN_SRC js :exports code
  var newElement = document.createElement("h1")
      .appendChild(document.createTextNode("Text here"));
  document.body.appendChild(newElement);
  newElement.classList.add("superbold");
#+END_SRC
*** Finding elements
#+BEGIN_CENTER
In order to modify already existing elements, we need to find them first 
#+END_CENTER
*** Finding elements by id
#+BEGIN_SRC js :exports none :tangle webdev/byID.js
  window.onload = function () {

#+END_SRC

#+BEGIN_SRC js :exports code :tangle webdev/byID.js
  var aHeading = document.getElementById("heading");
  aHeading.classList.add("superbold");
#+END_SRC

#+BEGIN_SRC js :exports none :tangle webdev/byID.js
  }
#+END_SRC

#+BEGIN_SRC html :exports none :tangle webdev/byID.html
  <html>
    <head>
      <script src="byID.js"></script>
      <style>
	.superbold {
          font-weight: bold;
          color: red;
	}
      </style>
    </head>

    <body>
      <h1 id="heading">Title text</h1>
    </body>
  </html>
#+END_SRC

*** Finding elements by class
#+BEGIN_SRC js :exports none :tangle webdev/byClass.js
  window.onload = function () {

#+END_SRC

#+BEGIN_SRC js :exports code :tangle webdev/byClass.js
  var listItems = document.getElementsByClassName("listy");

  for(var i=0; i < listItems.length; i = i + 1){
      listItems.item(i).classList.add("superbold");
   }
#+END_SRC

#+BEGIN_SRC js :exports none :tangle webdev/byClass.js
  }
#+END_SRC

#+BEGIN_SRC html :exports none :tangle webdev/byClass.html
  <html>
    <head>
      <script src="byClass.js"></script>
      <style>
	.superbold {
          font-weight: bold;
          color: red;
	}
      </style>
    </head>
    <body>
      <ol>
	<li class="listy">Some words</li>
	<li>other words</li>
	<li class="listy">the last words</li>
      </ol>
    </body>
  </html>

#+END_SRC

** Events
*** JavaScript event model
#+BEGIN_CENTER
Clicking, typing, moving the mouse, etc. create /events/
#+END_CENTER
*** Events are sensors
#+BEGIN_CENTER
Events are the /senses/ of your code
#+END_CENTER
*** Event handlers
#+BEGIN_SRC js :exports code :tangle webdev/mouseExample.js
  window.onload = function () {
      document.body
      .addEventListener("mousemove",console.log);
  }
#+END_SRC

#+BEGIN_SRC html :exports none :tangle webdev/mouseExample.html
  <head>
    <script src="mouseExample.js"></script>
  </head>
  <body>
    <ol>
      <li>In this code</li>
      <li>events fire</li>
      <li>as we move the mouse</li>
    </ol>
  </body>
#+END_SRC
*** Attaching events to buttons
    :PROPERTIES:
    :BEAMER_OPT: fragile
    :END:
#+BEGIN_EXPORT latex
\begin{minted}[fontsize=\footnotesize]{html}
  <html>
    <head>
      <script>
         window.onload = function () {
             var button = document.getElementById("button");
             button.addEventListener("click", function () {
	        console.log("the button was pressed");
             });
         }
      </script>
    </head>
    <body>
      <button id="button">Push me</button>
    </body>
  </html>
\end{minted}
#+END_EXPORT

#+BEGIN_SRC js :exports none :tangle webdev/butClick.js
  window.onload = function () {

      var button = document.getElementById("button");

      button.addEventListener("click", function () {
	  console.log("the button was pressed");
      });
  }
#+END_SRC
#+BEGIN_SRC html :exports none :tangle webdev/butClick.html
  <html>
    <head>
      <script src="butClick.js"></script>
    </head>

    <body>
      <button id="button">Push me</button>
    </body>
  </html>
#+END_SRC
*** Retrieving data from forms
    :PROPERTIES:
    :BEAMER_OPT: fragile
    :END:
#+BEGIN_EXPORT latex
\begin{minted}[fontsize=\footnotesize]{html}
  <html>
    <head>
    <script>
      window.onload = function () {
        var button = document.getElementById("button");
        button.addEventListener("click", function () {
	    console.log("the button was pressed");
        });
      }
    </script>
    </head>
    <body>
      <input id="input" value="stuff"/>
      <button id="button">Press me</button>
    </body>
  </html>
\end{minted}
#+END_EXPORT
#+BEGIN_SRC js :exports none :tangle webdev/inputExample.js
  window.onload = function () {
  var input = document.getElementById("input");
  var but = document.getElementById("button");

  but.addEventListener("click", function () {
      console.log(input.value);
  });
}
#+END_SRC
#+BEGIN_SRC html :exports none :tangle webdev/inputExample.html
  <html>
    <head>
      <script src="inputExample.js"></script>
    </head>
    <body>
      <input id="input" value="stuff"/>
      <button id="button">Press me</button>
    </body>
  </html>
#+END_SRC
*** The simplest todo list                                         :noexport:
#+BEGIN_CENTER
Let's try to pull all of this together into a single example
#+END_CENTER
*** The simplest todo list                                         :noexport:
#+BEGIN_SRC js :exports none :tangle webdev/todo.js
  window.onload = function () {
    
#+END_SRC

#+BEGIN_SRC js :exports code :tangle webdev/todo.js
  var 
#+END_SRC

** Wrapup
*** Using the Mozilla Developer Network
***** 
https://developer.mozilla.org/en-US/
***** 
file:mdn.png

*** Questions?
**** 
#+BEGIN_EXPORT latex
{\Huge Thank you for coming out!}
#+END_EXPORT
* Lecture 2                                                        :noexport:
